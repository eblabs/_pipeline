{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"imp",
				"import"
			],
			[
				"rig",
				"rigData"
			],
			[
				"build",
				"buildBaseRigNodes"
			],
			[
				"impor",
				"importContorlShape"
			],
			[
				"im",
				"importDeformer"
			],
			[
				"import",
				"importBlueprint"
			],
			[
				"exp",
				"exportObj"
			],
			[
				"lS",
				"lSel_nurbs"
			],
			[
				"lSe",
				"lSel_obj"
			],
			[
				"lSel",
				"lSel_nurbs"
			],
			[
				"li",
				"listRelatives"
			],
			[
				"lSel_",
				"lSel_nurbs"
			],
			[
				"select",
				"selection"
			],
			[
				"curre",
				"currentIndex"
			],
			[
				"__",
				"__assignSelShader"
			],
			[
				"QPush",
				"QPushButtonAssign"
			],
			[
				"selec",
				"selectionModel"
			],
			[
				"QS",
				"QSourceModel"
			],
			[
				"sS",
				"sSG"
			],
			[
				"QLis",
				"QListView"
			],
			[
				"currentI",
				"currentItem"
			],
			[
				"set",
				"setEnabled"
			],
			[
				"QP",
				"QPushButtonAssign"
			],
			[
				"is",
				"isValid"
			],
			[
				"curr",
				"currentIndex"
			],
			[
				"__crea",
				"__createAllPreset"
			],
			[
				"conen",
				"connectAttr"
			],
			[
				"QPus",
				"QPushButton_createSel"
			],
			[
				"QList",
				"QListViewPreset"
			],
			[
				"QPushButton_crea",
				"QPushButton_createSel"
			],
			[
				"fColo",
				"fColorB"
			],
			[
				"fCo",
				"fColorG"
			],
			[
				"create",
				"createLambertShader"
			],
			[
				"__c",
				"__createShader"
			],
			[
				"fC",
				"fColorB"
			],
			[
				"QLineEdit",
				"QLineEdit_name"
			],
			[
				"QD",
				"QDoubleSpinBox_R"
			],
			[
				"QH",
				"QHBoxLayout"
			],
			[
				"QPushButton_cr",
				"QPushButton_createAll"
			],
			[
				"add",
				"addWidget"
			],
			[
				"QPushButton_c",
				"QPushButton_createSel"
			],
			[
				"QHBoxLayout_",
				"QHBoxLayout_preset"
			],
			[
				"QV",
				"QVBoxLayout"
			],
			[
				"QLay",
				"QLayoutBase"
			],
			[
				"QL",
				"QLayout"
			],
			[
				"QLine",
				"QLineEdit_name"
			],
			[
				"setTi",
				"setTitle"
			],
			[
				"setM",
				"setMaximumWidth"
			],
			[
				"QLin",
				"QLineEdit_R"
			],
			[
				"QLineE",
				"QLineEdit_B"
			],
			[
				"Ql",
				"QLineEdit"
			],
			[
				"lR",
				"lRGB_remap"
			],
			[
				"fV",
				"fVal_remap"
			],
			[
				"dS",
				"dShaders"
			],
			[
				"dSh",
				"dShadersEach"
			],
			[
				"ass",
				"assignShaderToObjs"
			],
			[
				"dFu",
				"dFuncUpdate"
			],
			[
				"iI",
				"iIndex"
			],
			[
				"dF",
				"dFuncUpdate"
			],
			[
				"i",
				"iAfter"
			],
			[
				"dFunc",
				"dFuncUpdate"
			],
			[
				"QM",
				"QMenuItem_refresh"
			],
			[
				"QF",
				"QFrame_right"
			],
			[
				"pro",
				"progressBarUI"
			],
			[
				"file",
				"fileTreeView"
			],
			[
				"De",
				"Demo"
			],
			[
				"QT",
				"QTreeView"
			],
			[
				"Q",
				"QWidget"
			],
			[
				"load",
				"loadSaveUI"
			],
			[
				"oW",
				"oWidgetLoadSave"
			],
			[
				"pu",
				"publishUI"
			],
			[
				"QW",
				"QWidget"
			],
			[
				"QLayou",
				"QLayoutBase"
			],
			[
				"QVB",
				"QVBoxLayout"
			],
			[
				"com",
				"componentsButtonSet"
			],
			[
				"QPushButton_",
				"QPushButton_template"
			],
			[
				"compo",
				"componentsButtonSet"
			],
			[
				"QTabWidget_",
				"QTabWidget_components"
			],
			[
				"QTa",
				"QTabWidget_components"
			],
			[
				"o",
				"oBuildScript"
			],
			[
				"QGrou",
				"QGroupBoxComponents"
			],
			[
				"QLayout",
				"QLayout"
			],
			[
				"projec",
				"projectInfoUI"
			],
			[
				"Qt",
				"QtGui"
			],
			[
				"QLa",
				"QLayout"
			],
			[
				"getNodes",
				"getNodesPivotFromBoundingBox"
			],
			[
				"lTra",
				"lTransformInfoAvg"
			],
			[
				"lT",
				"lTransformInfoAvg"
			],
			[
				"transformi",
				"lTransformInf"
			],
			[
				"lTransf",
				"lTransformInfo"
			],
			[
				"lSkip",
				"lSkipTranslate"
			],
			[
				"lTran",
				"lTransformX"
			],
			[
				"lVtx",
				"lVtxPos"
			],
			[
				"mVtx",
				"mVtxPntArrayBase"
			],
			[
				"ap",
				"apiUtils"
			],
			[
				"sk",
				"skinCluster"
			],
			[
				"ge",
				"getSkinCluster"
			],
			[
				"bP",
				"bPntZ"
			],
			[
				"fP",
				"fPntX"
			],
			[
				"fPn",
				"fPntX"
			],
			[
				"inf",
				"influenceObjects"
			],
			[
				"lI",
				"lInfluences"
			],
			[
				"sFi",
				"sFileTypeLong"
			],
			[
				"lC",
				"lComponents"
			],
			[
				"f",
				"fTolerance"
			],
			[
				"con",
				"convertMPointArrayToList"
			],
			[
				"Sm",
				"sMethod"
			],
			[
				"sM",
				"sMethod"
			],
			[
				"l",
				"lBlendWeights"
			],
			[
				"no",
				"normalizeWeights"
			],
			[
				"_set",
				"_setMFnSkinCluster"
			],
			[
				"sI",
				"sInfluenceCurrent"
			],
			[
				"p",
				"partialPathName"
			],
			[
				"_se",
				"_setMFnSkinCluster"
			],
			[
				"get",
				"getSkinCluster"
			],
			[
				"_get",
				"_getSkinWeightArray"
			],
			[
				"u",
				"useComponents"
			],
			[
				"oN",
				"oNameGeo"
			],
			[
				"nam",
				"naming"
			],
			[
				"_",
				"_getSkinBlendWeights"
			],
			[
				"sU",
				"sInfluence"
			],
			[
				"Open",
				"OpenMayaAnim"
			],
			[
				"MS",
				"MSelectionList"
			],
			[
				"F",
				"False"
			],
			[
				"sShap",
				"sShapeEach"
			],
			[
				"list",
				"listConnections"
			],
			[
				"bIn",
				"bIntermediateEach"
			],
			[
				"bI",
				"bIntermediateEach"
			]
		]
	},
	"buffers":
	[
		{
			"file": "common/files.py",
			"settings":
			{
				"buffer_size": 3454,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "## External Import\nimport maya.cmds as cmds\nimport maya.mel as mel\nimport maya.OpenMaya as OpenMaya\nimport maya.OpenMayaAnim as OpenMayaAnim\nimport time\n## libs Import\nimport common.apiUtils as apiUtils\nimport modelingAPI.meshes as meshes\nimport joints\nimport namingAPI.naming as naming\nimport common.files as files\nreload(files)\n\n#### Functions\ndef getSkinCluster(sNode):\n\tsSkinCluster = mel.eval('findRelatedSkinCluster(\"' + sNode + '\")')\n\treturn sSkinCluster\n\ndef createSkinCluster(sNode, lInfluences):\n\tlJnts = []\n\tlGeos = []\n\tlCrvs = []\n\tsGrp = '_missedSkinJoints_'\n\toName = naming.oName(sNode)\n\toName.sType = 'skinCluster'\n\tfor sInfluence in lInfluences:\n\t\tif cmds.objExists(sInfluence):\n\t\t\tif cmds.objectType(sInfluence) == 'joint':\n\t\t\t\tlJnts.append(sInfluence)\n\t\t\telif cmds.objExists(sInfluence) == 'nurbsCurve':\n\t\t\t\tlCrvs.append(sInfluence)\n\t\t\telse:\n\t\t\t\tlGeos.append(sInfluence)\n\t\telse:\n\t\t\tcreateJnt(sInfluence)\n\t\t\tlJnts.append(sInfluence)\n\t\t\tif not cmds.objExists(sGrp):\n\t\t\t\tcmds.group(empty = True, name = sGrp)\n\t\t\t\tcmds.setAttr('%s.v' %sGrp, 0)\n\t\t\tcmds.parent(sInfluence, sGrp)\n\n\tcmds.skinCluster(lJnts, sNode, tsb = True, bindMethod = 0, skinMethod = 0, name = oName.sName)\n\n\tfor i, lComponents in enumerate([lCrvs, lGeos]):\n\t\tif lComponents:\n\t\t\tfor sComponent in lComponents:\n\t\t\t\tcmds.skinCluster(oName.sName, e = True, ug = i, ai = sComponent)\n\t\t\t\toNameGeo = naming.oName(sComponent)\n\t\t\t\toNameGeo.sPart += 'Base'\n\t\t\t\tcmds.rename('%sBase' %sComponent, oNameGeo.sName)\n\t\t\tcmds.setAttr('%s.useComponents' %oName.sName, 1)\n\n\treturn oName.sName\n\ndef removeUnusedInfluence(sMesh):\n\tsSkinCluster = getSkinCluster(sMesh)\n\tif sSkinCluster:\n\t\tlInfluences = cmds.skinCluster(sSkinCluster, q = True, inf = True)\n\t\tlInfluencesUsed = cmds.skinCluster(sSkinCluster, q = True, wi = True)\n\t\tfor sInfluence in lInfluencesUsed:\n\t\t\tlInfluences.remove(sInfluence)\n\t\tif lInfluences:\n\t\t\tfor sInfluence in lInfluences:\n\t\t\t\tcmds.skinCluster(sSkinCluster, e = True, removeInfluence = sInfluence)\n\t\t\t\tprint 'remove influenceObject %s from %s' %(sInfluence, sSkinCluster)\n\n\n\ndef getSkinClusterDataFromMesh(sMesh):\n\tsSkinCluster = getSkinCluster(sMesh)\n\tiVtxCount = meshes.getPolyVtxCount(sMesh)\n\tiSkinMethod = cmds.getAttr('%s.skinningMethod' %sSkinCluster)\n\tbComponents = cmds.getAttr('%s.useComponents' %sSkinCluster)\n\tiNormalizeWeights = cmds.getAttr('%s.normalizeWeights' %sSkinCluster)\n\tdSkinData = __getSkinWeightsData(sMesh)\n\tlBlendWeights = __getSkinBlendWeights(sMesh)\n\tmVtxPntArray = meshes.getMeshVtxPntArray(sMesh)\n\tlVtxPos = apiUtils.convertMPointArrayToList(mVtxPntArray)\n\tdSkinData = {\n\t\t\t\t\t'sGeo' : sMesh,\n\t\t\t\t\t'iVtxCount': iVtxCount,\n\t\t\t\t\t'iSkinMethod': iSkinMethod,\n\t\t\t\t\t'bComponents': bComponents,\n\t\t\t\t\t'iNormalizeWeights': iNormalizeWeights,\n\t\t\t\t\t'dSkinData': dSkinData,\n\t\t\t\t\t'lBlendWeights': lBlendWeights,\n\t\t\t\t\t'lVtxPos': lVtxPos\n\t\t\t\t}\n\treturn dSkinData\n\n\n\n#------------ save & load skinCluster functions -----------\ndef saveSkinClusterData(sMesh, sPath):\n\tfStartTime = time.time()\n\n\tdSkinData = getSkinClusterDataFromMesh(sMesh)\n\tfiles.writePickleFile(sPath, dSkinData)\n\n\tfEndTime = time.time()\n\n\tprint 'saved skinCluster for %s, took %s seconds' %(sMesh, fEndTime - fStartTime)\n\ndef loadSkinClusterData(sPath, sMesh = None, sMethod = 'vtxId'):\n\tfStartTime = time.time()\n\n\tdSkinData = files.readPickleFile(sPath)\n\n\tif not sMesh:\n\t\tsMesh = dSkinData['sGeo']\n\n\tif cmds.objExists(sMesh):\n\t\tsSkinCluster = getSkinCluster(sMesh)\n\t\tif not sSkinCluster:\n\t\t\tiVtxCount = meshes.getPolyVtxCount(sMesh)\n\t\t\tif iVtxCount == dSkinData['iVtxCount']:\n\t\t\t\tlInfluences = dSkinData['dSkinData'].keys()\n\t\t\t\tsSkinCluster = createSkinCluster(sMesh, lInfluences)\n\t\t\t\tmFnSkinCluster = __setMFnSkinCluster(sSkinCluster)\n\n\t\t\t\tcmds.setAttr('%s.normalizeWeights' %sSkinCluster, 0)\n\t\t\t\t__setSkinWeights(sMesh, mFnSkinCluster, dSkinData['dSkinData'], sMethod = sMethod, lVtxPos = dSkinData['lVtxPos'])\n\t\t\t\t__setSkinBlendWeights(sMesh, mFnSkinCluster, dSkinData['lBlendWeights'], sMethod = sMethod, lVtxPos = dSkinData['lVtxPos'])\n\n\t\t\t\tcmds.setAttr('%s.skinningMethod' %sSkinCluster, dSkinData['iSkinMethod'])\n\t\t\t\tcmds.setAttr('%s.useComponents' %sSkinCluster, dSkinData['bComponents'])\n\t\t\t\tcmds.setAttr('%s.normalizeWeights' %sSkinCluster, dSkinData['iNormalizeWeights'])\n\t\t\telse:\n\t\t\t\tprint '%s has different vertice count, original is %d, current is %s, skipped' %(sMethod, iVtxCount, dSkinData['iVtxCount'])\n\t\telse:\n\t\t\tprint '%s already has a skinCluster on it, %s, skipped' %(sMesh, skinCluster)\n\telse:\n\t\tprint '%s does not exist, skipped' %sMesh\n\n\tfEndTime = time.time()\n\n\tprint 'loaded skinCluster for %s, took %s seconds' %(sMesh, fEndTime - fStartTime)\n#------------ save & load skinCluster functions end -----------\n\n#### Sub Functions\ndef __setMFnSkinCluster(sSkinCluster):\n\tmObj = apiUtils.setMObj(sSkinCluster)\n\tmFnSkinCluster = OpenMayaAnim.MFnSkinCluster(mObj)\n\treturn mFnSkinCluster\n\ndef __getSkinWeightArray(mFnSkinCluster):\n\tmDagPath, mComponents = __getComponentsFromMFnSkinCluster(mFnSkinCluster)\n\tmWeightArray = OpenMaya.MDoubleArray()\n\tmUtil = OpenMaya.MScriptUtil()\n\tmUtil.createFromInt(0)\n\tuIntPtr = mUtil.asUintPtr()\n\tmFnSkinCluster.getWeights(mDagPath, mComponents, mWeightArray, uIntPtr)\n\n\tprint 'aaaa'\n\treturn mWeightArray\n\ndef __getComponentsFromMFnSkinCluster(mFnSkinCluster):\n\tmFnSet = OpenMaya.MFnSet(mFnSkinCluster.deformerSet())\n\tmSel = OpenMaya.MSelectionList()\n\tmFnSet.getMembers(mSel, False)\n\tmDagPath = OpenMaya.MDagPath()\n\tmComponents = OpenMaya.MObject()\n\tmSel.getDagPath(0, mDagPath, mComponents)\n\treturn mDagPath, mComponents\n\ndef __getSkinInfluenceArray(mFnSkinCluster):\n\tmInfluenceArray = OpenMaya.MDagPathArray()\n\tiInfluence = mFnSkinCluster.influenceObjects(mInfluenceArray)\n\treturn mInfluenceArray, iInfluence\n\ndef __getSkinWeightsData(sMesh):\n\tsSkinCluster = getSkinCluster(sMesh)\n\tmFnSkinCluster = __setMFnSkinCluster(sSkinCluster)\n\tmWeightArray = __getSkinWeightArray(mFnSkinCluster)\n\n\tmInfluenceArray, iInfluence = __getSkinInfluenceArray(mFnSkinCluster)\n\n\tiComponents = mWeightArray.length() / iInfluence\n\n\tdSkinData = {}\n\n\tfor i in range(iInfluence):\n\t\tsInfluence = mInfluenceArray[i].partialPathName()\n\n\t\tdSkinData[sInfluence] = []\n\t\tfor j in range(iComponents):\n\t\t\tdSkinData[sInfluence].append(mWeightArray[j * iInfluence + i])\n\n\treturn dSkinData\n\n\n\n\ndef __getSkinBlendWeights(sMesh):\n\tsSkinCluster = getSkinCluster(sMesh)\n\tmFnSkinCluster = __setMFnSkinCluster(sSkinCluster)\n\tmDagPath, mComponents = __getComponentsFromMFnSkinCluster(mFnSkinCluster)\n\tmWeightArray = OpenMaya.MDoubleArray()\n\tmFnSkinCluster.getBlendWeights(mDagPath, mComponents, mWeightArray)\n\tlBlendWeights = apiUtils.convertMDoubleArrayToList(mWeightArray)\n\treturn lBlendWeights\n\ndef __setSkinWeights(sMesh, mFnSkinCluster, dSkinData, sMethod = 'vtxId', lVtxPos = None, fTolerance = 0.00001):\n\tmDagPath, mComponents = __getComponentsFromMFnSkinCluster(mFnSkinCluster)\n\tmWeightArray = __getSkinWeightArray(mFnSkinCluster)\n\tmInfluenceArray, iInfluence = __getSkinInfluenceArray(mFnSkinCluster)\n\tiComponents = mWeightArray.length() / iInfluence\n\n\tif sMethod == 'vtxPos':\n\t\tlComponents = meshes.remapVtxIdToMesh(sMesh, lVtxPosBase = lVtxPos, fTolerance = fTolerance)\n\telse:\n\t\tlComponents = range(iComponents)\n\n\tfor sInfluence in dSkinData.keys():\n\t\tfor i in range(iInfluence):\n\t\t\tsInfluenceCurrent = mInfluenceArray[i].partialPathName()\n\t\t\tif sInfluence == sInfluenceCurrent:\n\t\t\t\tfor j, m in enumerate(lComponents):\n\t\t\t\t\tmWeightArray.set(dSkinData[sInfluence][m], j * iInfluence + i)\n\t\t\t\tbreak\n\n\tmIndexArray = OpenMaya.MIntArray(iInfluence)\n\tfor i in range(iInfluence):\n\t\tmIndexArray.set(i, i)\n\tmFnSkinCluster.setWeights(mDagPath, mComponents, mIndexArray, mWeightArray, False)\n\ndef __setSkinBlendWeights(sMesh, mFnSkinCluster, lBlendWeights, sMethod = 'vtxId', lVtxPos = None, fTolerance = 0.00001):\n\tmDagPath, mComponents = __getComponentsFromMFnSkinCluster(mFnSkinCluster)\n\tiComponents = len(lBlendWeights)\n\tmBlendWeightsArray = OpenMaya.MDoubleArray(iComponents)\n\n\tif sMethod == 'vtxPos':\n\t\tlComponents = meshes.remapVtxIdToMesh(sMesh, lVtxPosBase = lVtxPos, fTolerance = fTolerance)\n\telse:\n\t\tlComponents = range(iComponents)\n\tfor i, j in enumerate(lComponents):\n\t\tmBlendWeightsArray.set(lBlendWeights[j], i)\n\tmFnSkinCluster.setBlendWeights(mDagPath, mComponents, mBlendWeightsArray)\n",
			"file": "riggingAPI/deformers.py",
			"file_size": 8501,
			"file_write_time": 131515207280956787,
			"settings":
			{
				"buffer_size": 8285,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "modelingAPI/meshes.py",
			"settings":
			{
				"buffer_size": 2239,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "common/apiUtils.py",
			"settings":
			{
				"buffer_size": 792,
				"line_ending": "Windows"
			}
		},
		{
			"file": "riggingAPI/controls.py",
			"settings":
			{
				"buffer_size": 3866,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "riggingAPI/rigBuild/baseCore.py",
			"settings":
			{
				"buffer_size": 1938,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "riggingAPI/rigBuild/baseHierarchy.py",
			"settings":
			{
				"buffer_size": 2898,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "## External Import\nimport maya.cmds as cmds\nimport maya.mel as mel\nimport os\nimport json\nimport time\n\n## libs Import\nimport common.files as files\nimport common.transforms as transforms\nimport joints\n\n#### Functions\ndef saveBlueprintJnts(sPath):\n\tif cmds.objExists(files.sBlueprintGrp):\n\t\tlJnts = cmds.listRelatives(files.sBlueprintGrp, c = True, ad = True, type = 'joint')\n\t\tjoints.saveJointInfo(lJnts, sPath)\n\telse:\n\t\tcmds.warning('%s does not exist, skipped' %files.sBlueprintGrp)\n\ndef buildBlueprintJnts(sPath):\n\tif os.path.exists(sPath):\n\t\tjoints.buildJointsFromJointsInfo(sPath, sGrp = files.sBlueprintGrp)\n\telse:\n\t\tcmds.warning('blueprint file does not exist, cannot build the joints')\n\n\n\n\n#### Sub Functions\ndef generateComponentPath(dData, sProject, sAsset, sComponent):\n\tif dData['sProject']:\n\t\tsProject = dData['sProject']\n\tif dData['sAsset']:\n\t\tsAsset = dData['sAsset']\n\n",
			"file": "riggingAPI/rigComponents.py",
			"file_size": 745,
			"file_write_time": 131516565286006285,
			"settings":
			{
				"buffer_size": 882,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "riggingAPI/rigBuild/rigData.py",
			"settings":
			{
				"buffer_size": 167,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "UI/assetsManagerUI.py",
			"settings":
			{
				"buffer_size": 16719,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "common/workspaces.py",
			"settings":
			{
				"buffer_size": 14839,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "UI/syncAssetsUI.py",
			"settings":
			{
				"buffer_size": 13887,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "riggingAPI/rigBuilderUI.py",
			"settings":
			{
				"buffer_size": 15977,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "UI/baseUI.py",
			"settings":
			{
				"buffer_size": 426,
				"line_ending": "Windows"
			}
		},
		{
			"file": "UI/saveAssetUI.py",
			"settings":
			{
				"buffer_size": 7074,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "riggingAPI/joints.py",
			"settings":
			{
				"buffer_size": 1724,
				"line_ending": "Windows"
			}
		},
		{
			"file": "namingAPI/namingDict.py",
			"settings":
			{
				"buffer_size": 1670,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "namingAPI/naming.py",
			"settings":
			{
				"buffer_size": 4292,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "common/transforms.py",
			"settings":
			{
				"buffer_size": 5524,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/harri/Downloads/edgeFlowMirror.py",
			"settings":
			{
				"buffer_size": 55023,
				"line_ending": "Unix"
			}
		},
		{
			"file": "common/maths.py",
			"settings":
			{
				"buffer_size": 241,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "common/hierarchy.py",
			"settings":
			{
				"buffer_size": 1078,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pack",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 468.0
	},
	"console":
	{
		"height": 283.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/harri/Desktop/collapseExample.py",
		"/C/Users/harri/Desktop/exportObj.py",
		"/C/Users/harri/Desktop/assignShader.py",
		"/C/_pipeline/maya/riggingAPI/rigBuildUI.py",
		"/C/_pipeline/maya/riggingAPI/joints.py",
		"/C/Users/harri/Documents/maya/scripts/userSetup.py",
		"/C/Users/harri/Dropbox/Projects/correctiveExtract01.py",
		"/C/Users/harri/Downloads/skinio.py",
		"/C/_pipeline/maya/common/apiUtils.py",
		"/C/_works/maya/ten/skin.skinCluster",
		"/C/_works/maya/ten/controlShapes.ctrlShape",
		"/C/_works/maya/ten/geoHierarchy.geoHierarchy",
		"/C/_works/maya/ten/blueprint.blueprint",
		"/C/Users/harri/Dropbox/Projects/SCRIPTS/Tools/symmetricalTool.py",
		"/C/_pipeline/maya/namingAPI/__init__.py",
		"/C/_works/maya/BromProject/assets/chrBrom/rig/assetInfo.version",
		"/C/Users/harri/Desktop/retazRig.py",
		"/C/_works/maya/BromProject/assets/chrBrom/folders.folderList",
		"/C/_pipeline/maya/UI/saveAssetUI.py",
		"/C/_pipeline/maya/UI/syncAssetsUI.py",
		"/C/_pipeline/maya/UI/baseUI.py",
		"/C/_pipeline/maya/UI/assetsManagerUI.py",
		"/C/_pipeline/maya/common/workspaces.py",
		"/C/_pipeline/maya/common/files.py",
		"/C/_pipeline/maya/common/assetsManagerUI.py",
		"/C/_pipeline/maya/common/testFunc.py",
		"/C/_pipeline/maya/common/baseUI.py",
		"/C/_pipeline/maya/common/syncAssetsUI.py",
		"/C/_pipeline/maya/common/saveAssetUI.py",
		"/C/Users/harri/Desktop/test.py",
		"/C/_works/maya/BromProject/assets/chrBrom/model/assetInfo.version",
		"/C/_works/maya/folders.folderList",
		"/C/_works/maya/testRename/assets/folders.folderList",
		"/C/Users/harri/Downloads/PyQt4_gpl_win-4.12.1/examples/itemviews/customsortfiltermodel.pyw",
		"/C/Users/harri/Downloads/PyQt4_gpl_win-4.12.1/examples/itemviews/basicsortfiltermodel.pyw",
		"/C/Users/harri/Dropbox/Projects/SCRIPTS/uvBaseMeshRemapTool_forMaya02.py",
		"/C/Users/harri/Dropbox/Projects/SCRIPTS/Tools/wip_ui4.py",
		"/C/Users/harri/AppData/Local/Microsoft/Windows/INetCache/IE/8QF24N0T/shutil[1].py",
		"/C/Users/harri/Documents/maya/2016/Maya.env",
		"/C/Users/harri/Dropbox/_works/maya/folders.folderList",
		"/C/_works/maya/testRename/assets/asset2/folders.folderList",
		"/C/Users/harri/Dropbox/_works/maya/testRename/assets/asset2/folders.folderList",
		"/C/Users/harri/AppData/Local/Microsoft/Windows/INetCache/IE/04B80UZL/file_util[1].py",
		"/C/Users/harri/Dropbox/_works/folders.folderList",
		"/C/Users/harri/AppData/Local/Microsoft/Windows/INetCache/IE/PK6JRSZA/shutil[1].py",
		"/C/_pipeline/maya/common/syncAssetUI.py",
		"/C/_works/maya/testRename/assets/asset2/model/assetInfo.version",
		"/C/_pipeline/maya/common/assetManagerUI.py",
		"/C/_works/maya/testRename/assets/asset1/model/assetInfo.version",
		"/C/_works/maya/test3/assets/SSSSS/model/assetInfo.version",
		"/C/_works/maya/cartoonChar/assets/chrLuffy/model/assetInfo.version",
		"/C/_works/maya/test3/assets/asset1/model/assetInfo.version",
		"/C/_works/maya/test3/assets/renameS/model/assetInfo.version",
		"/C/_works/maya/test3/assets/renameS/folders.folderList",
		"/C/_works/maya/Test/assets/chrHarris01/model/assetInfo.version",
		"/C/_pipeline/maya/common/workspacesUI.py",
		"/C/_pipeline/maya/common/workspace.py",
		"/C/_pipeline/maya/commonAPI.py",
		"/C/_pipeline/maya/pipelineMaya.sublime-project",
		"/C/_pipeline/__init__.py"
	],
	"find":
	{
		"height": 54.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"___",
			"._",
			"_transformSnapAll",
			"_transformSnapParent",
			"_transformSnapScale",
			"_transformSnapOrient",
			"_transformSnapPoint",
			"_decomposeName",
			"._",
			"_setPathWinPop",
			"._",
			"workspaces",
			"_setPath",
			"_setPushButtonEnabled",
			"_listTypes",
			"_listAssets",
			"_listProjects",
			"_saveAsset",
			"_resetPath",
			"_setPathWinPop",
			"_getAssetFolders",
			"_listItemRightClicked",
			"_setQMenuItemCreateEnabled",
			"_openContainFolder",
			"_QMenuItemDelete",
			"_QMenuItemRename",
			"_QMenuItemCreate",
			"_listItemClick",
			"_listItemRightClicked",
			"_filterRegExpChanged",
			"_importAsset",
			"_openAsset",
			"_getCurrentAsset",
			"_setProject",
			"_setPushButtonEnabled",
			"_addQPushButton",
			"_setVersionComment",
			"_getCurrentVersion",
			"_setVersionEnabled",
			"_refreshVersion",
			"_addVersion",
			"_getVersionInfo",
			"_fileLayout",
			"files",
			"_getCtrlShapeKnots",
			"_getCtrlShapeControlPoints",
			"setMFnMesh",
			"_setSkinBlendWeights",
			"_setSkinWeights",
			"getSkinBlendWeights",
			"_getSkinWeightsData",
			"_getSkinInfluenceArray",
			"_getComponentsFromMFnSkinCluster",
			"_getSkinWeightArray",
			"_setMFnSkinCluster",
			"workspaces",
			"_filterRegExpChanged",
			"_addFile",
			"_refreshFileList",
			"_setList",
			"syncCmd",
			"refreshCmd",
			"_checkoutCmd",
			"_publishCmd",
			"_getSelectItem",
			"_",
			"_getVersionFiles",
			"_getFoldersFromFolderList",
			"_writeFolderListFile",
			"_createFolderListFile",
			"_getAssetFile",
			"_getAssetDirectory",
			"createVersionFile",
			"getProject",
			"assetsManagerBaseLayout",
			"oLayout_type",
			"selectionModel",
			"_setPushButtonEnabled",
			"self.QListView.currentIndex().data()",
			"bInput",
			"fileListView",
			"QListView",
			"_listItemRightClicked",
			"setAlignment",
			"class",
			"_addQPushButton",
			"lTransformInf",
			"getNodesAvgTransformInfo",
			"getPoly",
			"_setSkinWeights",
			"_getSkinBlendWeights",
			".length()",
			"self.fn",
			"__getCurrentWeights",
			"_getSkinWeightArray",
			"_getCtrlShapeControlPoints",
			"setData",
			"pickle",
			"self.fn",
			"__getGeometryComponents",
			"setDagPath",
			"__getGeometryComponents",
			"gatherInfluenceWeights",
			"__getCurrentWeights",
			"SkinCluster",
			"sDriver",
			"decomposeName",
			"_getFoldersFromFolderList",
			"getFoldersThroughPath",
			"_getVersionFiles",
			"update",
			"_getAssetFile",
			"_getVersionInfo",
			"sFileDelete",
			"_createVersionFile",
			"_addVersion",
			"lVersions",
			"sEndTime",
			"sStartTime",
			"print",
			"getFileInfoFromLocalAndServer",
			"os.remove",
			"open",
			"stat",
			"copyfile",
			"_getSelectItem",
			"self.QLabel_file",
			"setCurrentIndex"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"__",
			"transformSnapAll",
			"transformSnapParent",
			"transformSnapScale",
			"transformSnapOrient",
			"transformSnapPoint",
			"decomposeName",
			"setPath",
			"setPushButtonEnabled",
			"listTypes",
			"listAssets",
			"listProjects",
			"__saveAsset",
			"__resetPath",
			"__setPathWinPop",
			"__getAssetFolders",
			"getAssetFolders",
			"listItemRightClicked",
			"setQMenuItemCreateEnabled",
			"openContainFolder",
			"QMenuItemDelete",
			"QMenuItemRename",
			"QMenuItemCreate",
			"listItemClick",
			"listItemRightClicked",
			"filterRegExpChanged",
			"__importAsset",
			"__openAsset",
			"__getCurrentAsset",
			"__setProject",
			"__setPushButtonEnabled",
			"__addQPushButton",
			"__setVersionComment",
			"__getCurrentVersion",
			"__setVersionEnabled",
			"__refreshVersion",
			"__addVersion",
			"__getVersionInfo",
			"__fileLayout",
			"__getCtrlShapeKnots",
			"__getCtrlShapeControlPoints",
			"__setMFnMesh",
			"__setSkinBlendWeights",
			"__setSkinWeights",
			"__getSkinBlendWeights",
			"__getSkinWeightsData",
			"__getSkinInfluenceArray",
			"__getComponentsFromMFnSkinCluster",
			"__getSkinWeightArray",
			"__setMFnSkinCluster",
			"filterRegExpChanged",
			"addFile",
			"refreshFileList",
			"setList",
			"__setList",
			"__syncCmd",
			"__refreshCmd",
			"__checkoutCmd",
			"__publishCmd",
			"__getSelectItem",
			"getVersionFiles",
			"getFoldersFromFolderList",
			"writeFolderListFile",
			"createFolderListFile",
			"getAssetFile",
			"getAssetDirectory",
			"fEndTime",
			"fStartTime",
			"_writeFolderListFile",
			"sFolderList",
			"self.dAssetData",
			"QTreeView_version",
			"QListWidget"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 10,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "common/files.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3454,
						"regions":
						{
						},
						"selection":
						[
							[
								3073,
								3073
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "riggingAPI/deformers.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8285,
						"regions":
						{
						},
						"selection":
						[
							[
								7680,
								7682
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6724.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "modelingAPI/meshes.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2239,
						"regions":
						{
						},
						"selection":
						[
							[
								1110,
								1110
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "common/apiUtils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 792,
						"regions":
						{
						},
						"selection":
						[
							[
								475,
								499
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "riggingAPI/controls.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3866,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "riggingAPI/rigBuild/baseCore.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1938,
						"regions":
						{
						},
						"selection":
						[
							[
								292,
								292
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "riggingAPI/rigBuild/baseHierarchy.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2898,
						"regions":
						{
						},
						"selection":
						[
							[
								2670,
								2670
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3465.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "riggingAPI/rigComponents.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 882,
						"regions":
						{
						},
						"selection":
						[
							[
								880,
								880
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 495.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "riggingAPI/rigBuild/rigData.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 167,
						"regions":
						{
						},
						"selection":
						[
							[
								166,
								166
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "UI/assetsManagerUI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16719,
						"regions":
						{
						},
						"selection":
						[
							[
								592,
								592
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 405.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "common/workspaces.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14839,
						"regions":
						{
						},
						"selection":
						[
							[
								3994,
								3994
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3738.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "UI/syncAssetsUI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13887,
						"regions":
						{
						},
						"selection":
						[
							[
								6804,
								6804
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6104.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "riggingAPI/rigBuilderUI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15977,
						"regions":
						{
						},
						"selection":
						[
							[
								15355,
								15355
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 12809.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "UI/baseUI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 426,
						"regions":
						{
						},
						"selection":
						[
							[
								426,
								316
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "UI/saveAssetUI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7074,
						"regions":
						{
						},
						"selection":
						[
							[
								572,
								572
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 339.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "riggingAPI/joints.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1724,
						"regions":
						{
						},
						"selection":
						[
							[
								926,
								971
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "namingAPI/namingDict.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1670,
						"regions":
						{
						},
						"selection":
						[
							[
								1653,
								1653
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2079.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "namingAPI/naming.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4292,
						"regions":
						{
						},
						"selection":
						[
							[
								3419,
								3419
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "common/transforms.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5524,
						"regions":
						{
						},
						"selection":
						[
							[
								203,
								204
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/C/Users/harri/Downloads/edgeFlowMirror.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55023,
						"regions":
						{
						},
						"selection":
						[
							[
								42991,
								42991
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 36663.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "common/maths.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 241,
						"regions":
						{
						},
						"selection":
						[
							[
								147,
								121
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "common/hierarchy.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1078,
						"regions":
						{
						},
						"selection":
						[
							[
								1067,
								1067
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 41.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "pipelineMaya.sublime-project",
	"replace":
	{
		"height": 100.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
